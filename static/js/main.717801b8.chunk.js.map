{"version":3,"sources":["CurrencyRow.js","Equals.js","App.js","serviceWorker.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","TextField","label","variant","type","className","value","onChange","helperText","select","map","option","MenuItem","key","Equals","fromCurrency","toCurrency","exchangeRate","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","setFromCurrency","setToCurrency","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","history","setHistory","setHighestRate","lowestRate","setLowestRate","getHistory","from","to","start","fetch","Date","toISOString","slice","then","res","json","data","error","alert","rates","Object","keys","date","rate","values","sort","a","b","ratesSorted","length","getDate","daysToMinus","today","setDate","useEffect","firstCurrency","base","Fragment","e","target","width","height","margin","top","right","left","bottom","dataKey","domain","scale","name","stroke","yAxisId","dot","ButtonGroup","color","aria-label","Button","onMouseDown","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.717801b8.chunk.js","sourcesContent":["import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport default function CurrencyRow(props) {\n    const {\n        currencyOptions,\n        selectedCurrency,\n        onChangeCurrency,\n        onChangeAmount,\n        amount,\n    } = props\n\n    return (\n        <div>\n            <TextField\n                label=\"Amount\"\n                variant=\"outlined\"\n                type='number'\n                className='input'\n                value={amount}\n                onChange={onChangeAmount}\n                helperText=\"Input your amount\"\n            />\n\n            <TextField\n                label=\"Currency\"\n                variant=\"outlined\"\n                className=\"select\"\n                select\n                value={`${selectedCurrency}`}\n                onChange={onChangeCurrency}\n                helperText=\"Select your currency\"\n            >\n                {currencyOptions.map(option => (\n                    <MenuItem key={option} value={option}>\n                        {option}\n                    </MenuItem>\n                ))}\n            </TextField>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Equals(props) {\n    const {\n        fromCurrency,\n        toCurrency,\n        exchangeRate\n    } = props\n    return (\n    <div className='equals'>{`1 ${fromCurrency} = ${exchangeRate} ${toCurrency}`}</div>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CurrencyRow from './CurrencyRow'\nimport Equals from './Equals';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from 'recharts';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\n\n\nconst BASE_URL = 'https://api.exchangeratesapi.io'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [exchangeRate = 0, setExchangeRate] = useState()\n  const [amount = 0, setAmount] = useState(1)\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n  const [history, setHistory] = useState()\n  // eslint-disable-next-line no-unused-vars\n  const [highestRate, setHighestRate] = useState()\n  const [lowestRate, setLowestRate] = useState()\n\n  let toAmount\n  let fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(`${BASE_URL}/latest?base=GBP`)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[18]\n        setCurrencyOptions([...Object.keys(data.rates).sort()])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}/latest?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n      getHistory(fromCurrency, toCurrency, getDate(365))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n\n  function getHistory(from, to, start = \"1999-01-04\") {\n    fetch(`${BASE_URL}/history?start_at=${start}&end_at=${new Date().toISOString().slice(0, 10)}&base=${from}&symbols=${to}`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) {\n          alert(`Unable to get the history information for ${from} at this time, try another date range.`)\n          setHistory([])\n        } else {\n          const rates = Object.keys(data.rates)\n            .map(date => ({ date: date, rate: Object.values(data.rates[date])[0] }))\n            .sort((a, b) => new Date(a.date) - new Date(b.date))\n          setHistory(rates)\n          const ratesSorted = Object.keys(data.rates)\n            .map(date => ({ date: date, rate: Object.values(data.rates[date])[0] }))\n            .sort((a, b) => a.rate - b.rate)\n          setLowestRate(ratesSorted[0])\n          setHighestRate(ratesSorted[ratesSorted.length - 1])\n        }\n      })\n  }\n\n  function getDate(daysToMinus) {\n    let today = new Date()\n    today.setDate(today.getDate() - daysToMinus)\n    return today.toISOString().slice(0, 10)\n  }\n\n  function allTime(e) {\n    e.preventDefault()\n    getHistory(fromCurrency, toCurrency)\n  }\n\n  function lastYear(e) {\n    e.preventDefault()\n    getHistory(fromCurrency, toCurrency, getDate(365))\n  }\n\n  function lastThreeMonths(e) {\n    e.preventDefault()\n    getHistory(fromCurrency, toCurrency, getDate(90))\n  }\n\n  function lastMonth(e) {\n    e.preventDefault()\n    getHistory(fromCurrency, toCurrency, getDate(30))\n  }\n\n  function lastWeek(e) {\n    e.preventDefault()\n    getHistory(fromCurrency, toCurrency, getDate(7))\n  }\n\n  return (\n    <React.Fragment>\n      <h1>Currency Convertor</h1>\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <Equals\n        fromCurrency={fromCurrency}\n        toCurrency={toCurrency}\n        exchangeRate={exchangeRate}\n      />\n      <CurrencyRow\n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n      <h5>{`Rate History of ${fromCurrency} / ${toCurrency}`}</h5>\n      <ResponsiveContainer\n        width=\"90%\"\n        height={200}\n      >\n        <LineChart\n          data={history}\n          margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\n        >\n          <XAxis dataKey=\"date\" type=\"category\" domain=\"auto\" scale=\"auto\" name=\"Date\" />\n          <YAxis dataKey=\"rate\" type=\"number\" domain={[lowestRate, \"auto\"]} scale=\"auto\" />\n          <Tooltip />\n          <CartesianGrid stroke=\"#f5f5f5\" />\n          <Line type=\"monotone\" dataKey=\"rate\" stroke=\"#ff7300\" yAxisId={0} dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n\n      <ButtonGroup color=\"default\" aria-label=\"outlined primary button group\" className=\"buttons\">\n        <Button onMouseDown={allTime}>All Time</Button>\n        <Button onMouseDown={lastYear}>Last Year</Button>\n        <Button onMouseDown={lastThreeMonths}>Last 3 Months</Button>\n        <Button onMouseDown={lastMonth}>Last Month</Button>\n        <Button onMouseDown={lastWeek}>Last Week</Button>\n      </ButtonGroup>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}